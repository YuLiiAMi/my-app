{"ast":null,"code":"var _jsxFileName = \"D:\\\\Hillel \\u043A\\u0443\\u0440\\u0441\\\\React\\\\my-app\\\\client\\\\src\\\\components\\\\Card\\\\Card.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./Card.css\";\nimport logo from \"../../logo.svg\";\nimport Input from \"../../components/Input/Input\";\nimport Button from \"../../components/Button/Button\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Card = () => {\n  _s();\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [userName, setUserName] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const handleLogin = async () => {\n    setError(\"Обидва поля мають бути заповнені\");\n    return;\n    if (!userName) {\n      setErrors(prevErrors => ({\n        ...prevErrors,\n        userName: \"Введите логин\"\n      }));\n    }\n    if (!password) {\n      setErrors(prevErrors => ({\n        ...prevErrors,\n        password: \"Введите пароль\"\n      }));\n    }\n    if (!userName || !password) {\n      return;\n    }\n    try {\n      const response = await fetch(\"http://localhost:5000/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          username: userName,\n          password: password\n        })\n      });\n      if (response.status === 200) {\n        const data = await response.json();\n        localStorage.setItem(\"token\", data.token);\n        setIsLoggedIn(true);\n      } else {\n        setErrors({\n          userName: \"Логін або пароль невірні\",\n          password: \"\"\n        });\n      }\n    } catch (error) {\n      setErrors({\n        userName: \"Помилка під час авторизації\",\n        password: \"\"\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Login-card\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: logo,\n      className: \"App-logo\",\n      alt: \"logo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Input, {\n      value: userName,\n      onChange: e => setUserName(e.target.value),\n      placeholder: \"User name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Input, {\n      type: \"password\",\n      value: password,\n      onChange: e => setPassword(e.target.value),\n      placeholder: \"Password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleLogin\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_s(Card, \"gCeJcS193UqFDWg6lvOnAr/pW4o=\");\n_c = Card;\nexport default Card;\nvar _c;\n$RefreshReg$(_c, \"Card\");","map":{"version":3,"names":["React","useState","logo","Input","Button","jsxDEV","_jsxDEV","Card","_s","isLoggedIn","setIsLoggedIn","userName","setUserName","password","setPassword","handleLogin","setError","setErrors","prevErrors","response","fetch","method","headers","body","JSON","stringify","username","status","data","json","localStorage","setItem","token","error","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","placeholder","type","onClick","_c","$RefreshReg$"],"sources":["D:/Hillel курс/React/my-app/client/src/components/Card/Card.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./Card.css\";\r\nimport logo from \"../../logo.svg\";\r\nimport Input from \"../../components/Input/Input\";\r\nimport Button from \"../../components/Button/Button\";\r\n\r\nconst Card = () => {\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n  const [userName, setUserName] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n\r\n  const handleLogin = async () => {\r\n    setError(\"Обидва поля мають бути заповнені\");\r\n    return;\r\n\r\n    if (!userName) {\r\n      setErrors((prevErrors) => ({\r\n        ...prevErrors,\r\n        userName: \"Введите логин\",\r\n      }));\r\n    }\r\n\r\n    if (!password) {\r\n      setErrors((prevErrors) => ({\r\n        ...prevErrors,\r\n        password: \"Введите пароль\",\r\n      }));\r\n    }\r\n\r\n    if (!userName || !password) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(\"http://localhost:5000/login\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ username: userName, password: password }),\r\n      });\r\n\r\n      if (response.status === 200) {\r\n        const data = await response.json();\r\n        localStorage.setItem(\"token\", data.token);\r\n        setIsLoggedIn(true);\r\n      } else {\r\n        setErrors({ userName: \"Логін або пароль невірні\", password: \"\" });\r\n      }\r\n    } catch (error) {\r\n      setErrors({ userName: \"Помилка під час авторизації\", password: \"\" });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"Login-card\">\r\n      <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n      <Input\r\n        value={userName}\r\n        onChange={(e) => setUserName(e.target.value)}\r\n        placeholder=\"User name\"\r\n      />\r\n      <Input\r\n        type=\"password\"\r\n        value={password}\r\n        onChange={(e) => setPassword(e.target.value)}\r\n        placeholder=\"Password\"\r\n      />\r\n      <Button onClick={handleLogin} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}